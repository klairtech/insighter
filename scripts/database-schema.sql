-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ab_testing_experiments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  experiment_name character varying NOT NULL,
  experiment_type character varying NOT NULL CHECK (experiment_type::text = ANY (ARRAY['model_comparison'::character varying, 'strategy_comparison'::character varying, 'feature_comparison'::character varying]::text[])),
  control_config jsonb NOT NULL,
  treatment_config jsonb NOT NULL,
  traffic_split numeric DEFAULT 0.5,
  status character varying NOT NULL DEFAULT 'draft'::character varying CHECK (status::text = ANY (ARRAY['draft'::character varying, 'running'::character varying, 'completed'::character varying, 'paused'::character varying, 'cancelled'::character varying]::text[])),
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ab_testing_experiments_pkey PRIMARY KEY (id),
  CONSTRAINT ab_testing_experiments_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.ab_testing_results (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  experiment_id uuid NOT NULL,
  variant character varying NOT NULL CHECK (variant::text = ANY (ARRAY['control'::character varying, 'treatment'::character varying]::text[])),
  user_id uuid,
  outcome jsonb NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ab_testing_results_pkey PRIMARY KEY (id),
  CONSTRAINT ab_testing_results_experiment_id_fkey FOREIGN KEY (experiment_id) REFERENCES public.ab_testing_experiments(id),
  CONSTRAINT ab_testing_results_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.access_audit_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  resource_type text NOT NULL CHECK (resource_type = ANY (ARRAY['organization'::text, 'workspace'::text, 'agent'::text])),
  resource_id uuid NOT NULL,
  action text NOT NULL CHECK (action = ANY (ARRAY['granted'::text, 'revoked'::text, 'modified'::text])),
  old_access text,
  new_access text,
  granted_by uuid,
  reason text,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT access_audit_log_pkey PRIMARY KEY (id),
  CONSTRAINT access_audit_log_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT access_audit_log_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES auth.users(id)
);
CREATE TABLE public.achievements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  achievement_id text NOT NULL UNIQUE,
  title text NOT NULL,
  description text NOT NULL,
  icon_name text NOT NULL,
  xp_reward integer NOT NULL DEFAULT 0,
  category text NOT NULL CHECK (category = ANY (ARRAY['usage'::text, 'streak'::text, 'skill'::text, 'special'::text])),
  agent_id text,
  criteria jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT achievements_pkey PRIMARY KEY (id)
);
CREATE TABLE public.agent_access (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  agent_id uuid NOT NULL,
  user_id uuid NOT NULL,
  access_level text NOT NULL DEFAULT 'read'::text CHECK (access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])),
  granted_by uuid NOT NULL,
  granted_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_access_pkey PRIMARY KEY (id),
  CONSTRAINT agent_access_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id),
  CONSTRAINT agent_access_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT agent_access_granted_by_fkey FOREIGN KEY (granted_by) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_capabilities (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  agent_id uuid NOT NULL,
  capability_type character varying NOT NULL,
  capability_config jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_capabilities_pkey PRIMARY KEY (id),
  CONSTRAINT agent_capabilities_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id)
);
CREATE TABLE public.agent_controls (
  id integer NOT NULL DEFAULT nextval('agent_controls_id_seq'::regclass),
  agent_id character varying NOT NULL UNIQUE,
  agent_category character varying,
  is_enabled boolean NOT NULL DEFAULT true,
  is_featured boolean NOT NULL DEFAULT false,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_by uuid,
  updated_by uuid,
  display_name text,
  description text,
  max_uses_per_day integer DEFAULT 100,
  max_uses_per_user integer DEFAULT 10,
  CONSTRAINT agent_controls_pkey PRIMARY KEY (id),
  CONSTRAINT agent_controls_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.tools(id),
  CONSTRAINT agent_controls_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT agent_controls_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id)
);
CREATE TABLE public.agent_performance_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  agent_type character varying NOT NULL,
  workspace_id uuid,
  total_queries integer DEFAULT 0,
  successful_queries integer DEFAULT 0,
  failed_queries integer DEFAULT 0,
  average_processing_time_ms numeric,
  average_confidence_score numeric,
  successful_strategies jsonb,
  failure_patterns jsonb,
  improvement_rate numeric,
  last_optimization_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT agent_performance_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT agent_performance_metrics_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.ai_agents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  workspace_id uuid NOT NULL UNIQUE,
  agent_type text NOT NULL DEFAULT 'data_analyzer'::text CHECK (agent_type = ANY (ARRAY['data_analyzer'::text, 'content_generator'::text, 'question_answerer'::text, 'custom'::text])),
  status text NOT NULL DEFAULT 'inactive'::text CHECK (status = ANY (ARRAY['active'::text, 'inactive'::text, 'training'::text, 'error'::text])),
  config jsonb DEFAULT '{}'::jsonb,
  data_sources jsonb DEFAULT '[]'::jsonb,
  created_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  api_token text UNIQUE,
  api_token_expires_at timestamp with time zone,
  api_enabled boolean DEFAULT false,
  api_rate_limit integer DEFAULT 100,
  api_usage_count integer DEFAULT 0,
  last_api_used_at timestamp with time zone,
  CONSTRAINT ai_agents_pkey PRIMARY KEY (id),
  CONSTRAINT ai_agents_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT ai_agents_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.analytics_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  report_name text NOT NULL,
  report_type text NOT NULL CHECK (report_type = ANY (ARRAY['standard'::text, 'realtime'::text])),
  date date NOT NULL,
  dimensions_encrypted text NOT NULL,
  metrics_encrypted text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT analytics_data_pkey PRIMARY KEY (id),
  CONSTRAINT analytics_data_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.api_rate_limits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  api_token text NOT NULL,
  window_start timestamp with time zone NOT NULL,
  request_count integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT api_rate_limits_pkey PRIMARY KEY (id)
);
CREATE TABLE public.api_token_audit (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  agent_id uuid NOT NULL,
  old_token text,
  new_token text NOT NULL,
  action text NOT NULL CHECK (action = ANY (ARRAY['created'::text, 'regenerated'::text, 'expired'::text])),
  user_id uuid NOT NULL,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT api_token_audit_pkey PRIMARY KEY (id),
  CONSTRAINT api_token_audit_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id)
);
CREATE TABLE public.api_usage_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  agent_id uuid NOT NULL,
  api_token text NOT NULL,
  conversation_id text NOT NULL,
  request_message text NOT NULL,
  response_text text,
  response_image_url text,
  tokens_used integer DEFAULT 0,
  processing_time_ms integer,
  status text NOT NULL DEFAULT 'success'::text CHECK (status = ANY (ARRAY['success'::text, 'error'::text, 'rate_limited'::text])),
  error_message text,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT api_usage_logs_pkey PRIMARY KEY (id),
  CONSTRAINT api_usage_logs_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id)
);
CREATE TABLE public.blog_posts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  content text NOT NULL,
  excerpt text,
  slug text NOT NULL UNIQUE,
  published boolean NOT NULL DEFAULT false,
  tags ARRAY DEFAULT '{}'::text[],
  author_id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT blog_posts_pkey PRIMARY KEY (id),
  CONSTRAINT blog_posts_author_id_fkey FOREIGN KEY (author_id) REFERENCES auth.users(id)
);
CREATE TABLE public.canvas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  name text NOT NULL,
  description text,
  config jsonb NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone DEFAULT (now() + '30 days'::interval),
  is_public boolean DEFAULT false,
  CONSTRAINT canvas_pkey PRIMARY KEY (id),
  CONSTRAINT canvas_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.cold_start_solutions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  user_id uuid,
  solution_type character varying NOT NULL CHECK (solution_type::text = ANY (ARRAY['transfer_learning'::character varying, 'default_strategy'::character varying, 'similar_workspace'::character varying, 'synthetic_data'::character varying]::text[])),
  solution_data jsonb NOT NULL,
  confidence_score numeric DEFAULT 0.0,
  effectiveness_score numeric DEFAULT 0.0,
  usage_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT cold_start_solutions_pkey PRIMARY KEY (id),
  CONSTRAINT cold_start_solutions_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT cold_start_solutions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.contact_forms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  email text NOT NULL,
  company text,
  phone text,
  service text,
  message text NOT NULL,
  ip_address text,
  created_at timestamp with time zone DEFAULT now(),
  form_type text NOT NULL DEFAULT 'contact'::text,
  status text NOT NULL DEFAULT 'new'::text CHECK (status = ANY (ARRAY['new'::text, 'in_progress'::text, 'resolved'::text, 'closed'::text])),
  notes text,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT contact_forms_pkey PRIMARY KEY (id)
);
CREATE TABLE public.content_change_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  change_type text NOT NULL CHECK (change_type = ANY (ARRAY['created'::text, 'updated'::text, 'deleted'::text, 'synced'::text])),
  content_type text NOT NULL CHECK (content_type = ANY (ARRAY['spreadsheet'::text, 'document'::text, 'web-page'::text])),
  content_id text,
  old_hash text,
  new_hash text,
  change_summary text,
  detected_at timestamp with time zone DEFAULT now(),
  processed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT content_change_log_pkey PRIMARY KEY (id),
  CONSTRAINT content_change_log_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.content_fingerprints (
  usage_event_id uuid NOT NULL,
  input_sha256 text,
  output_sha256 text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT content_fingerprints_pkey PRIMARY KEY (usage_event_id),
  CONSTRAINT content_fingerprints_usage_event_id_fkey FOREIGN KEY (usage_event_id) REFERENCES public.usage_events(id)
);
CREATE TABLE public.conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  agent_id uuid NOT NULL,
  conversation_type text NOT NULL DEFAULT 'chat'::text CHECK (conversation_type = ANY (ARRAY['chat'::text, 'api'::text])),
  title text NOT NULL DEFAULT 'New Conversation'::text,
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'archived'::text, 'deleted'::text])),
  external_conversation_id text,
  api_metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_message_at timestamp with time zone DEFAULT now(),
  CONSTRAINT conversations_pkey PRIMARY KEY (id),
  CONSTRAINT conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT conversations_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id)
);
CREATE TABLE public.credit_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  credits_amount integer NOT NULL,
  price_inr integer NOT NULL,
  bonus_credits integer DEFAULT 0,
  is_active boolean DEFAULT true,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT credit_plans_pkey PRIMARY KEY (id)
);
CREATE TABLE public.credit_purchases (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  plan_id uuid NOT NULL,
  razorpay_payment_id text,
  razorpay_order_id text,
  razorpay_signature text,
  amount_paid integer NOT NULL,
  credits_purchased integer NOT NULL,
  bonus_credits integer DEFAULT 0,
  total_credits integer NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'refunded'::text])),
  purchase_date timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT credit_purchases_pkey PRIMARY KEY (id),
  CONSTRAINT credit_purchases_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT credit_purchases_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.credit_plans(id)
);
CREATE TABLE public.daily_logins (
  id integer NOT NULL DEFAULT nextval('daily_logins_id_seq'::regclass),
  user_id uuid NOT NULL,
  login_date date NOT NULL,
  login_count integer DEFAULT 1,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  first_login_type text DEFAULT 'session_start'::text,
  first_login_method text DEFAULT 'unknown'::text,
  last_login_type text DEFAULT 'session_start'::text,
  last_login_method text DEFAULT 'unknown'::text,
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  last_logout_type text,
  last_logout_method text,
  last_logout_at timestamp with time zone,
  CONSTRAINT daily_logins_pkey PRIMARY KEY (id),
  CONSTRAINT daily_logins_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_quota (
  user_id uuid NOT NULL,
  date date NOT NULL,
  runs_used integer NOT NULL DEFAULT 0,
  tokens_used integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  credits_used integer NOT NULL DEFAULT 0,
  CONSTRAINT daily_quota_pkey PRIMARY KEY (date, user_id),
  CONSTRAINT daily_quota_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.daily_quota_guest (
  guest_session_id uuid NOT NULL,
  date date NOT NULL,
  runs_used integer NOT NULL DEFAULT 0,
  tokens_used integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  credits_used integer NOT NULL DEFAULT 0,
  CONSTRAINT daily_quota_guest_pkey PRIMARY KEY (date, guest_session_id),
  CONSTRAINT daily_quota_guest_guest_session_id_fkey FOREIGN KEY (guest_session_id) REFERENCES public.guest_sessions(id)
);
CREATE TABLE public.data_access_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  data_id text NOT NULL,
  user_id uuid NOT NULL,
  access_type text NOT NULL CHECK (access_type = ANY (ARRAY['read'::text, 'write'::text, 'delete'::text, 'export'::text, 'share'::text])),
  access_granted boolean NOT NULL,
  access_reason text,
  ip_address text NOT NULL,
  user_agent text NOT NULL,
  timestamp timestamp with time zone NOT NULL DEFAULT now(),
  session_id text,
  request_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT data_access_logs_pkey PRIMARY KEY (id),
  CONSTRAINT data_access_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.data_source_config (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_id text NOT NULL UNIQUE,
  name text NOT NULL,
  category text NOT NULL,
  icon_url text,
  color_class text,
  default_port text,
  description text,
  is_enabled boolean NOT NULL DEFAULT false,
  is_beta boolean NOT NULL DEFAULT false,
  sort_order integer NOT NULL DEFAULT 0,
  release_notes text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT data_source_config_pkey PRIMARY KEY (id)
);
CREATE TABLE public.data_source_effectiveness (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  data_source_id uuid NOT NULL,
  workspace_id uuid,
  total_queries integer DEFAULT 0,
  successful_queries integer DEFAULT 0,
  average_relevance_score numeric,
  query_type_performance jsonb,
  entity_performance jsonb,
  optimization_suggestions jsonb,
  last_optimization_date timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT data_source_effectiveness_pkey PRIMARY KEY (id),
  CONSTRAINT data_source_effectiveness_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.database_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  type text NOT NULL,
  host text NOT NULL,
  port integer NOT NULL,
  database text NOT NULL,
  username text NOT NULL,
  password_encrypted text,
  workspace_id uuid NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  schema_info_encrypted text,
  selected_tables_encrypted text,
  connection_config_encrypted text,
  last_schema_sync timestamp with time zone,
  schema_version text DEFAULT 'v1'::text,
  schema_name text DEFAULT 'public'::text,
  CONSTRAINT database_connections_pkey PRIMARY KEY (id),
  CONSTRAINT database_connections_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.document_content (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  section_title text,
  section_content_encrypted text NOT NULL,
  section_type text DEFAULT 'paragraph'::text CHECK (section_type = ANY (ARRAY['paragraph'::text, 'heading'::text, 'list'::text, 'table'::text, 'image'::text, 'link'::text, 'code'::text])),
  section_order integer DEFAULT 0,
  metadata jsonb DEFAULT '{}'::jsonb,
  word_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT document_content_pkey PRIMARY KEY (id),
  CONSTRAINT document_content_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.exchange_rates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  base_currency character varying NOT NULL,
  target_currency character varying NOT NULL,
  rate numeric NOT NULL,
  last_updated timestamp with time zone DEFAULT now(),
  source character varying DEFAULT 'manual'::character varying,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT exchange_rates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.external_connection_auth_tokens (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  token_type character varying NOT NULL CHECK (token_type::text = ANY (ARRAY['oauth_access'::text, 'oauth_refresh'::text, 'api_key'::text, 'bearer'::text, 'basic'::text])),
  token_value_encrypted text NOT NULL,
  expires_at timestamp with time zone,
  scope text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT external_connection_auth_tokens_pkey PRIMARY KEY (id),
  CONSTRAINT external_connection_auth_tokens_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.external_connection_data_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  cache_key character varying NOT NULL,
  data_encrypted text NOT NULL,
  data_hash character varying NOT NULL,
  expires_at timestamp with time zone NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT external_connection_data_cache_pkey PRIMARY KEY (id),
  CONSTRAINT external_connection_data_cache_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.external_connection_queries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  user_id uuid NOT NULL,
  query_text text NOT NULL,
  query_type character varying NOT NULL CHECK (query_type::text = ANY (ARRAY['select'::text, 'filter'::text, 'aggregate'::text, 'search'::text, 'analyze'::text])),
  query_result jsonb,
  execution_time_ms integer,
  records_returned integer DEFAULT 0,
  status character varying NOT NULL DEFAULT 'success'::character varying CHECK (status::text = ANY (ARRAY['success'::text, 'error'::text, 'timeout'::text])),
  error_message text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT external_connection_queries_pkey PRIMARY KEY (id),
  CONSTRAINT external_connection_queries_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id),
  CONSTRAINT external_connection_queries_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.external_connection_syncs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  sync_type character varying NOT NULL CHECK (sync_type::text = ANY (ARRAY['full'::text, 'incremental'::text, 'manual'::text])),
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['success'::text, 'error'::text, 'partial'::text])),
  records_processed integer DEFAULT 0,
  error_message text,
  started_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT external_connection_syncs_pkey PRIMARY KEY (id),
  CONSTRAINT external_connection_syncs_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.external_connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  type text NOT NULL,
  url text,
  api_key_encrypted text,
  config_encrypted text,
  workspace_id uuid NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  content_type character varying CHECK (content_type::text = ANY (ARRAY['spreadsheet'::character varying, 'document'::character varying, 'api'::character varying, 'website'::character varying, 'rss'::character varying, 'notion'::character varying, 'airtable'::character varying, 'slack'::character varying, 'github'::character varying, 'jira'::character varying, 'trello'::character varying, 'asana'::character varying, 'sharepoint'::character varying, 'onedrive'::character varying, 'dropbox'::character varying, 'google-sheets'::character varying, 'google-docs'::character varying, 'web-page'::character varying, 'web-scrape'::character varying, 'analytics'::character varying]::text[])),
  auth_config_encrypted text,
  sync_config jsonb DEFAULT '{}'::jsonb,
  last_sync timestamp with time zone,
  content_summary text,
  ai_definitions jsonb DEFAULT '{}'::jsonb,
  schema_metadata jsonb DEFAULT '{}'::jsonb,
  data_sample jsonb DEFAULT '{}'::jsonb,
  connection_status character varying DEFAULT 'active'::character varying CHECK (connection_status::text = ANY (ARRAY['active'::text, 'inactive'::text, 'error'::text, 'syncing'::text])),
  oauth_provider text CHECK (oauth_provider = ANY (ARRAY['google'::text, 'microsoft'::text, 'github'::text, 'slack'::text, 'notion'::text, 'airtable'::text])),
  oauth_scopes ARRAY DEFAULT '{}'::text[],
  refresh_token_encrypted text,
  token_expires_at timestamp with time zone,
  web_scraping_config jsonb DEFAULT '{}'::jsonb,
  content_filters jsonb DEFAULT '{}'::jsonb,
  sync_frequency text DEFAULT 'manual'::text CHECK (sync_frequency = ANY (ARRAY['manual'::text, 'hourly'::text, 'daily'::text, 'weekly'::text, 'monthly'::text])),
  last_content_hash text,
  content_size_bytes integer DEFAULT 0,
  row_count integer DEFAULT 0,
  column_count integer DEFAULT 0,
  CONSTRAINT external_connections_pkey PRIMARY KEY (id),
  CONSTRAINT external_connections_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.faqs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  question text NOT NULL,
  answer text NOT NULL,
  category text NOT NULL,
  display_order integer NOT NULL DEFAULT 0,
  published boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT faqs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.feature_importance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_id uuid NOT NULL,
  feature_name character varying NOT NULL,
  importance_score numeric NOT NULL,
  feature_type character varying NOT NULL CHECK (feature_type::text = ANY (ARRAY['basic'::character varying, 'semantic'::character varying, 'temporal'::character varying, 'context'::character varying, 'advanced'::character varying]::text[])),
  calculated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feature_importance_pkey PRIMARY KEY (id),
  CONSTRAINT feature_importance_model_id_fkey FOREIGN KEY (model_id) REFERENCES public.ml_models(id)
);
CREATE TABLE public.feedback (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type text NOT NULL CHECK (type = ANY (ARRAY['general'::text, 'bug'::text, 'feature'::text, 'ui'::text, 'performance'::text, 'other'::text])),
  rating integer CHECK (rating >= 1 AND rating <= 5),
  title text NOT NULL,
  description text NOT NULL,
  user_email text NOT NULL,
  user_name text NOT NULL,
  company text,
  website text,
  phone text,
  priority text NOT NULL CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  category text NOT NULL,
  steps_to_reproduce text,
  expected_behavior text,
  actual_behavior text,
  browser_info text,
  device_info text,
  user_id uuid,
  session_id uuid,
  submitted_at timestamp with time zone NOT NULL,
  url text,
  status text NOT NULL DEFAULT 'new'::text CHECK (status = ANY (ARRAY['new'::text, 'in_review'::text, 'in_progress'::text, 'resolved'::text, 'closed'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT feedback_pkey PRIMARY KEY (id)
);
CREATE TABLE public.file_processing_queue (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  file_id uuid NOT NULL,
  status text NOT NULL DEFAULT 'queued'::text CHECK (status = ANY (ARRAY['queued'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'cancelled'::text])),
  priority integer DEFAULT 0,
  attempts integer DEFAULT 0,
  max_attempts integer DEFAULT 3,
  error_message text,
  processing_started_at timestamp with time zone,
  processing_completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT file_processing_queue_pkey PRIMARY KEY (id),
  CONSTRAINT file_processing_queue_file_id_fkey FOREIGN KEY (file_id) REFERENCES public.file_uploads(id)
);
CREATE TABLE public.file_summaries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  file_id uuid NOT NULL UNIQUE,
  summary text,
  key_points ARRAY,
  tags ARRAY,
  content_type text,
  word_count integer,
  reading_time_minutes integer,
  llm_model text,
  llm_tokens_used integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  agent_definition jsonb DEFAULT '{}'::jsonb,
  summary_encrypted text,
  key_points_encrypted text,
  tags_encrypted text,
  agent_definition_encrypted text,
  encryption_version text DEFAULT 'v1'::text,
  CONSTRAINT file_summaries_pkey PRIMARY KEY (id),
  CONSTRAINT file_summaries_file_id_fkey FOREIGN KEY (file_id) REFERENCES public.file_uploads(id)
);
CREATE TABLE public.file_uploads (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  filename text NOT NULL,
  original_name text NOT NULL,
  file_type text NOT NULL,
  file_size integer NOT NULL,
  file_path text NOT NULL,
  workspace_id uuid NOT NULL,
  uploaded_by uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  s3_key text,
  s3_bucket text,
  content_hash text,
  processing_status text DEFAULT 'pending'::text CHECK (processing_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  processing_error text,
  processed_at timestamp with time zone,
  extracted_text_encrypted text,
  extraction_timestamp timestamp with time zone,
  extraction_method text,
  CONSTRAINT file_uploads_pkey PRIMARY KEY (id),
  CONSTRAINT file_uploads_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT file_uploads_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES auth.users(id)
);
CREATE TABLE public.guest_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  ip_hash text,
  ua_hash text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  last_seen_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT guest_sessions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.insighter_credit_batches (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  batch_code text NOT NULL,
  credits_added integer NOT NULL,
  credits_remaining integer NOT NULL,
  credits_used integer NOT NULL DEFAULT 0,
  batch_type text NOT NULL CHECK (batch_type = ANY (ARRAY['monthly_free'::text, 'monthly_paid'::text, 'one_time_purchase'::text, 'bonus'::text, 'refund'::text])),
  plan_type text NOT NULL DEFAULT 'free'::text CHECK (plan_type = ANY (ARRAY['free'::text, 'premium'::text, 'enterprise'::text, 'flexible'::text])),
  added_date date NOT NULL DEFAULT CURRENT_DATE,
  expiry_date date NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_annual boolean DEFAULT false,
  CONSTRAINT insighter_credit_batches_pkey PRIMARY KEY (id),
  CONSTRAINT insighter_credit_batches_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.insighter_credit_usage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  batch_id uuid NOT NULL,
  credits_used integer NOT NULL,
  operation_type text NOT NULL CHECK (operation_type = ANY (ARRAY['database_query'::text, 'schema_analysis'::text, 'data_visualization'::text, 'ai_summary'::text, 'file_processing'::text, 'chat_interaction'::text, 'api_call'::text])),
  operation_id uuid,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT insighter_credit_usage_pkey PRIMARY KEY (id),
  CONSTRAINT insighter_credit_usage_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT insighter_credit_usage_batch_id_fkey FOREIGN KEY (batch_id) REFERENCES public.insighter_credit_batches(id)
);
CREATE TABLE public.insighter_plans (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  plan_name text NOT NULL UNIQUE,
  plan_type text NOT NULL CHECK (plan_type = ANY (ARRAY['free'::text, 'premium'::text, 'enterprise'::text, 'flexible'::text])),
  monthly_credits integer NOT NULL,
  price_usd integer,
  price_inr integer,
  features jsonb DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  display_order integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT insighter_plans_pkey PRIMARY KEY (id)
);
CREATE TABLE public.insighter_purchases (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  plan_id uuid,
  payment_id text,
  order_id text,
  amount_paid integer NOT NULL,
  credits_purchased integer NOT NULL,
  batch_code text NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'refunded'::text])),
  purchase_date timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  currency character varying DEFAULT 'INR'::character varying CHECK (currency::text = ANY (ARRAY['USD'::character varying, 'INR'::character varying, 'EUR'::character varying, 'GBP'::character varying]::text[])),
  is_annual boolean DEFAULT false,
  billing_period text DEFAULT 'monthly'::text CHECK (billing_period = ANY (ARRAY['monthly'::text, 'annual'::text])),
  CONSTRAINT insighter_purchases_pkey PRIMARY KEY (id),
  CONSTRAINT insighter_purchases_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT insighter_purchases_plan_id_fkey FOREIGN KEY (plan_id) REFERENCES public.insighter_plans(id)
);
CREATE TABLE public.interaction_contexts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  session_id uuid NOT NULL,
  agent_id text NOT NULL,
  interaction_type text NOT NULL CHECK (interaction_type = ANY (ARRAY['search'::text, 'rewrite'::text, 'generate'::text, 'analyze'::text, 'transform'::text, 'other'::text])),
  input_content text NOT NULL,
  input_metadata jsonb DEFAULT '{}'::jsonb,
  output_content text NOT NULL,
  output_metadata jsonb DEFAULT '{}'::jsonb,
  conversation_context jsonb DEFAULT '{}'::jsonb,
  context_summary text,
  model_used text,
  tokens_used integer DEFAULT 0,
  latency_ms integer DEFAULT 0,
  status text NOT NULL DEFAULT 'success'::text CHECK (status = ANY (ARRAY['success'::text, 'error'::text, 'partial'::text])),
  error_message text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '30 days'::interval),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT interaction_contexts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.learning_insights_cache (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid,
  user_id uuid,
  query_patterns jsonb,
  success_strategies jsonb,
  failure_patterns jsonb,
  optimization_suggestions jsonb,
  cache_version character varying,
  last_updated timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  model_performance jsonb,
  feature_importance jsonb,
  drift_indicators jsonb,
  ab_test_results jsonb,
  CONSTRAINT learning_insights_cache_pkey PRIMARY KEY (id),
  CONSTRAINT learning_insights_cache_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT learning_insights_cache_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.loyalty_badges (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  icon text,
  required_points integer NOT NULL,
  badge_type text NOT NULL CHECK (badge_type = ANY (ARRAY['purchase'::text, 'loyalty'::text, 'special'::text])),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT loyalty_badges_pkey PRIMARY KEY (id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  sender_type text NOT NULL CHECK (sender_type = ANY (ARRAY['user'::text, 'agent'::text, 'system'::text])),
  content_encrypted text NOT NULL,
  content_hash text NOT NULL,
  message_type text NOT NULL DEFAULT 'text'::text CHECK (message_type = ANY (ARRAY['text'::text, 'image'::text, 'file'::text, 'system'::text])),
  metadata_encrypted text,
  tokens_used integer DEFAULT 0,
  processing_time_ms integer DEFAULT 0,
  encryption_version text DEFAULT 'v1'::text CHECK (encryption_version = ANY (ARRAY['v1'::text, 'v2'::text, 'v3'::text])),
  api_request_id text,
  api_response_metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  confidence_score real CHECK (confidence_score >= 0.0::double precision AND confidence_score <= 1.0::double precision),
  model_interpretability_score real CHECK (model_interpretability_score >= 0.0::double precision AND model_interpretability_score <= 1.0::double precision),
  analysis_depth text CHECK (analysis_depth = ANY (ARRAY['surface'::text, 'moderate'::text, 'deep'::text, 'comprehensive'::text])),
  data_quality_score real CHECK (data_quality_score >= 0.0::double precision AND data_quality_score <= 1.0::double precision),
  response_completeness_score real CHECK (response_completeness_score >= 0.0::double precision AND response_completeness_score <= 1.0::double precision),
  user_satisfaction_prediction real CHECK (user_satisfaction_prediction >= 0.0::double precision AND user_satisfaction_prediction <= 1.0::double precision),
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id)
);
CREATE TABLE public.mfa_methods (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  method_type text NOT NULL CHECK (method_type = ANY (ARRAY['totp'::text, 'sms'::text, 'email'::text, 'backup_codes'::text])),
  method_data jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_primary boolean NOT NULL DEFAULT false,
  is_enabled boolean NOT NULL DEFAULT true,
  last_used timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT mfa_methods_pkey PRIMARY KEY (id),
  CONSTRAINT mfa_methods_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.mfa_verification_attempts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  method_id uuid NOT NULL,
  attempt_type text NOT NULL CHECK (attempt_type = ANY (ARRAY['verification'::text, 'backup_code'::text, 'recovery'::text])),
  success boolean NOT NULL,
  ip_address text NOT NULL,
  user_agent text NOT NULL,
  failure_reason text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT mfa_verification_attempts_pkey PRIMARY KEY (id),
  CONSTRAINT mfa_verification_attempts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT mfa_verification_attempts_method_id_fkey FOREIGN KEY (method_id) REFERENCES public.mfa_methods(id)
);
CREATE TABLE public.migration_log (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  migration_name text NOT NULL UNIQUE,
  applied_at timestamp with time zone NOT NULL DEFAULT now(),
  description text,
  CONSTRAINT migration_log_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ml_models (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid,
  user_id uuid,
  model_type character varying NOT NULL CHECK (model_type::text = ANY (ARRAY['neural_network'::character varying, 'gradient_boosting'::character varying, 'random_forest'::character varying, 'ensemble'::character varying]::text[])),
  model_name character varying NOT NULL,
  model_version character varying NOT NULL DEFAULT '1.0.0'::character varying,
  model_data jsonb NOT NULL,
  training_data_size integer DEFAULT 0,
  accuracy_score numeric,
  precision_score numeric,
  recall_score numeric,
  f1_score numeric,
  last_trained_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ml_models_pkey PRIMARY KEY (id),
  CONSTRAINT ml_models_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT ml_models_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ml_predictions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_type character varying NOT NULL,
  workspace_id uuid,
  user_id uuid,
  input_features jsonb NOT NULL,
  prediction jsonb NOT NULL,
  confidence_score numeric,
  actual_outcome jsonb,
  prediction_accuracy numeric,
  was_used boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  enhanced_features jsonb,
  model_version character varying,
  prediction_metadata jsonb,
  feature_contributions jsonb,
  uncertainty_score numeric,
  explanation jsonb,
  model_type_enhanced character varying CHECK (model_type_enhanced::text = ANY (ARRAY['neural_network'::character varying, 'gradient_boosting'::character varying, 'random_forest'::character varying, 'ensemble'::character varying]::text[])),
  CONSTRAINT ml_predictions_pkey PRIMARY KEY (id),
  CONSTRAINT ml_predictions_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT ml_predictions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.ml_training_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_type character varying NOT NULL,
  workspace_id uuid,
  input_features jsonb NOT NULL,
  expected_output jsonb NOT NULL,
  actual_output jsonb,
  training_batch_id uuid,
  model_version character varying,
  accuracy_score numeric,
  created_at timestamp with time zone DEFAULT now(),
  enhanced_features jsonb,
  feature_importance jsonb,
  training_metadata jsonb,
  validation_metrics jsonb,
  CONSTRAINT ml_training_data_pkey PRIMARY KEY (id),
  CONSTRAINT ml_training_data_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.model_deployments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_id uuid NOT NULL,
  deployment_version character varying NOT NULL,
  deployment_status character varying NOT NULL DEFAULT 'pending'::character varying CHECK (deployment_status::text = ANY (ARRAY['pending'::character varying, 'deploying'::character varying, 'active'::character varying, 'rollback'::character varying, 'failed'::character varying]::text[])),
  deployment_config jsonb,
  performance_threshold numeric,
  rollback_threshold numeric,
  deployed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT model_deployments_pkey PRIMARY KEY (id),
  CONSTRAINT model_deployments_model_id_fkey FOREIGN KEY (model_id) REFERENCES public.ml_models(id)
);
CREATE TABLE public.model_drift_detection (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_id uuid NOT NULL,
  drift_type character varying NOT NULL CHECK (drift_type::text = ANY (ARRAY['concept_drift'::character varying, 'data_drift'::character varying, 'performance_drift'::character varying]::text[])),
  drift_score numeric NOT NULL,
  detection_method character varying NOT NULL,
  drift_details jsonb,
  detected_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  CONSTRAINT model_drift_detection_pkey PRIMARY KEY (id),
  CONSTRAINT model_drift_detection_model_id_fkey FOREIGN KEY (model_id) REFERENCES public.ml_models(id)
);
CREATE TABLE public.model_performance_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_id uuid NOT NULL,
  metric_type character varying NOT NULL CHECK (metric_type::text = ANY (ARRAY['accuracy'::character varying, 'precision'::character varying, 'recall'::character varying, 'f1_score'::character varying, 'drift_score'::character varying, 'feature_importance'::character varying]::text[])),
  metric_value numeric NOT NULL,
  metric_details jsonb,
  calculated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT model_performance_metrics_pkey PRIMARY KEY (id),
  CONSTRAINT model_performance_metrics_model_id_fkey FOREIGN KEY (model_id) REFERENCES public.ml_models(id)
);
CREATE TABLE public.multimodal_learning_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  user_id uuid,
  data_type character varying NOT NULL CHECK (data_type::text = ANY (ARRAY['text'::character varying, 'image'::character varying, 'file'::character varying, 'visualization'::character varying, 'audio'::character varying]::text[])),
  data_content jsonb NOT NULL,
  extracted_features jsonb,
  semantic_embedding jsonb,
  relevance_score numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT multimodal_learning_data_pkey PRIMARY KEY (id),
  CONSTRAINT multimodal_learning_data_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT multimodal_learning_data_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.oauth_tokens (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  provider text NOT NULL CHECK (provider = ANY (ARRAY['google'::text, 'microsoft'::text, 'github'::text, 'slack'::text, 'notion'::text, 'airtable'::text])),
  access_token_encrypted text NOT NULL,
  refresh_token_encrypted text,
  token_type text DEFAULT 'Bearer'::text,
  expires_at timestamp with time zone,
  scope ARRAY DEFAULT '{}'::text[],
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT oauth_tokens_pkey PRIMARY KEY (id),
  CONSTRAINT oauth_tokens_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.organization_invitations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  email text NOT NULL,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['admin'::text, 'member'::text, 'viewer'::text])),
  invited_by uuid NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'declined'::text, 'expired'::text])),
  token text NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '7 days'::interval),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT organization_invitations_pkey PRIMARY KEY (id),
  CONSTRAINT organization_invitations_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT organization_invitations_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES public.users(id)
);
CREATE TABLE public.organization_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text DEFAULT 'member'::text CHECK (role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text, 'viewer'::text])),
  created_at timestamp with time zone DEFAULT now(),
  status text NOT NULL DEFAULT 'active'::text,
  CONSTRAINT organization_members_pkey PRIMARY KEY (id),
  CONSTRAINT organization_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT organization_members_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.organizations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  industry text,
  size text,
  website text,
  location text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  status text NOT NULL DEFAULT 'active'::text,
  CONSTRAINT organizations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.premium_credit_usage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  premium_credit_id uuid NOT NULL,
  tool_id text NOT NULL,
  credits_used integer NOT NULL,
  usage_date timestamp with time zone DEFAULT now(),
  CONSTRAINT premium_credit_usage_pkey PRIMARY KEY (id),
  CONSTRAINT premium_credit_usage_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT premium_credit_usage_premium_credit_id_fkey FOREIGN KEY (premium_credit_id) REFERENCES public.user_premium_credits(id)
);
CREATE TABLE public.real_time_learning_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  user_id uuid,
  event_type character varying NOT NULL CHECK (event_type::text = ANY (ARRAY['prediction'::character varying, 'feedback'::character varying, 'correction'::character varying, 'optimization'::character varying]::text[])),
  event_data jsonb NOT NULL,
  processing_time_ms integer,
  success boolean,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT real_time_learning_events_pkey PRIMARY KEY (id),
  CONSTRAINT real_time_learning_events_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT real_time_learning_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.seo_page_analytics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  page_path text NOT NULL,
  tool_id text,
  user_id uuid,
  session_id uuid,
  time_on_page integer,
  bounce boolean DEFAULT false,
  referrer text,
  user_agent text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT seo_page_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT seo_page_analytics_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES public.tools(id),
  CONSTRAINT seo_page_analytics_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.spreadsheet_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  sheet_name text NOT NULL,
  row_index integer NOT NULL,
  column_index integer NOT NULL,
  cell_value_encrypted text,
  cell_type text DEFAULT 'text'::text CHECK (cell_type = ANY (ARRAY['text'::text, 'number'::text, 'date'::text, 'boolean'::text, 'formula'::text, 'url'::text])),
  cell_format jsonb DEFAULT '{}'::jsonb,
  is_header boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT spreadsheet_data_pkey PRIMARY KEY (id),
  CONSTRAINT spreadsheet_data_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.test_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  test_case_id text NOT NULL,
  user_id uuid,
  session_id uuid,
  status text NOT NULL CHECK (status = ANY (ARRAY['not_started'::text, 'in_progress'::text, 'completed'::text, 'failed'::text])),
  feedback text,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  issues jsonb,
  suggestions jsonb,
  start_time timestamp with time zone,
  end_time timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT test_sessions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.token_usage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  tokens_used integer NOT NULL,
  action text NOT NULL CHECK (action = ANY (ARRAY['chat'::text, 'canvas_generation'::text, 'dashboard_creation'::text])),
  created_at timestamp with time zone DEFAULT now(),
  model_used text,
  model_provider text,
  model_version text,
  fallback_used boolean DEFAULT false,
  input_tokens integer,
  output_tokens integer,
  system_tokens integer,
  context_tokens integer,
  agent_processing_tokens integer,
  metadata jsonb DEFAULT '{}'::jsonb,
  agent_step text,
  agent_type text,
  step_order integer,
  conversation_step_id uuid,
  CONSTRAINT token_usage_pkey PRIMARY KEY (id),
  CONSTRAINT token_usage_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.tools (
  id text NOT NULL,
  name text NOT NULL,
  description text NOT NULL,
  status text NOT NULL DEFAULT 'active'::text,
  max_runs_per_day integer NOT NULL DEFAULT 10,
  max_tokens_per_day integer NOT NULL DEFAULT 50000,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  max_credits_per_day integer NOT NULL DEFAULT 50,
  CONSTRAINT tools_pkey PRIMARY KEY (id)
);
CREATE TABLE public.usage_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_id uuid,
  tool_id text NOT NULL,
  model text,
  input_tokens integer NOT NULL DEFAULT 0,
  output_tokens integer NOT NULL DEFAULT 0,
  latency_ms integer NOT NULL DEFAULT 0,
  status text NOT NULL DEFAULT 'success'::text,
  error_code text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT usage_events_pkey PRIMARY KEY (id),
  CONSTRAINT usage_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT usage_events_tool_id_fkey FOREIGN KEY (tool_id) REFERENCES public.tools(id)
);
CREATE TABLE public.user_achievements (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  achievement_id text NOT NULL,
  unlocked_at timestamp with time zone NOT NULL DEFAULT now(),
  xp_awarded integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_achievements_pkey PRIMARY KEY (id),
  CONSTRAINT user_achievements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_achievements_achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(achievement_id)
);
CREATE TABLE public.user_badges (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  badge_id uuid NOT NULL,
  earned_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_badges_pkey PRIMARY KEY (id),
  CONSTRAINT user_badges_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_badges_badge_id_fkey FOREIGN KEY (badge_id) REFERENCES public.loyalty_badges(id)
);
CREATE TABLE public.user_interaction_patterns (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  workspace_id uuid,
  agent_id uuid,
  original_query text NOT NULL,
  optimized_query text,
  query_intent character varying,
  query_entities jsonb,
  query_complexity_score numeric,
  conversation_length integer,
  previous_failures_count integer DEFAULT 0,
  successful_patterns_used jsonb,
  processing_strategy character varying,
  data_sources_used jsonb,
  execution_time_ms integer,
  success boolean NOT NULL,
  failure_reason character varying,
  user_satisfaction_score integer CHECK (user_satisfaction_score >= 1 AND user_satisfaction_score <= 5),
  user_feedback text,
  features_vector jsonb,
  prediction_confidence numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  enhanced_features jsonb,
  semantic_entities jsonb,
  domain_keywords jsonb,
  complexity_indicators jsonb,
  temporal_features jsonb,
  context_features jsonb,
  ml_prediction_confidence numeric,
  model_version character varying,
  feature_importance_scores jsonb,
  CONSTRAINT user_interaction_patterns_pkey PRIMARY KEY (id),
  CONSTRAINT user_interaction_patterns_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_interaction_patterns_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT user_interaction_patterns_agent_id_fkey FOREIGN KEY (agent_id) REFERENCES public.ai_agents(id)
);
CREATE TABLE public.user_loyalty_points (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  points_earned integer NOT NULL,
  points_used integer DEFAULT 0,
  points_remaining integer NOT NULL,
  source text NOT NULL,
  source_id uuid,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_loyalty_points_pkey PRIMARY KEY (id),
  CONSTRAINT user_loyalty_points_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_personas (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_id uuid,
  persona_type text NOT NULL,
  communication_style text,
  writing_quality text,
  business_focus text,
  tech_savviness text,
  preferred_tools ARRAY,
  usage_frequency text,
  session_duration_avg integer,
  tools_per_session_avg numeric,
  content_complexity text,
  content_length_avg integer,
  formatting_usage boolean DEFAULT false,
  feedback_engagement boolean DEFAULT false,
  pain_points ARRAY,
  business_size text,
  industry_hints ARRAY,
  budget_indicators text,
  urgency_level text,
  total_sessions integer DEFAULT 0,
  total_tools_used integer DEFAULT 0,
  total_credits_used integer DEFAULT 0,
  last_active_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_personas_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_preferences (
  user_id uuid NOT NULL,
  opt_in_fingerprints boolean NOT NULL DEFAULT false,
  opt_in_history boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  gdpr_preferences jsonb DEFAULT '{}'::jsonb,
  cookie_preferences jsonb DEFAULT '{}'::jsonb,
  analytics_consent boolean NOT NULL DEFAULT false,
  functional_consent boolean NOT NULL DEFAULT true,
  marketing_consent boolean NOT NULL DEFAULT false,
  CONSTRAINT user_preferences_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_premium_credits (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  purchase_id uuid NOT NULL,
  credits_remaining integer NOT NULL,
  credits_used integer DEFAULT 0,
  expires_at timestamp with time zone NOT NULL,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  total_credits integer NOT NULL DEFAULT 0,
  CONSTRAINT user_premium_credits_pkey PRIMARY KEY (id),
  CONSTRAINT user_premium_credits_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_premium_credits_purchase_id_fkey FOREIGN KEY (purchase_id) REFERENCES public.credit_purchases(id)
);
CREATE TABLE public.user_progress (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  agent_id text NOT NULL,
  level integer NOT NULL DEFAULT 1,
  xp integer NOT NULL DEFAULT 0,
  total_uses integer NOT NULL DEFAULT 0,
  current_streak integer NOT NULL DEFAULT 0,
  longest_streak integer NOT NULL DEFAULT 0,
  last_used_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_progress_pkey PRIMARY KEY (id),
  CONSTRAINT user_progress_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  session_token text NOT NULL UNIQUE,
  device_info jsonb,
  ip_address inet,
  user_agent text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  last_activity timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '30 days'::interval),
  is_active boolean NOT NULL DEFAULT true,
  CONSTRAINT user_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT user_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE,
  created_at timestamp with time zone DEFAULT now(),
  last_login timestamp with time zone DEFAULT now(),
  total_tokens_used integer DEFAULT 0,
  subscription_tier text DEFAULT 'free'::text CHECK (subscription_tier = ANY (ARRAY['free'::text, 'pro'::text, 'enterprise'::text])),
  canvas_saves integer DEFAULT 0,
  updated_at timestamp with time zone DEFAULT now(),
  name text,
  country text,
  instruction_language character varying DEFAULT 'en'::character varying,
  preferred_currency character varying DEFAULT 'INR'::character varying CHECK (preferred_currency::text = ANY (ARRAY['USD'::character varying, 'INR'::character varying, 'EUR'::character varying, 'GBP'::character varying]::text[])),
  avatar_path text,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.web_scraped_content (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  url text NOT NULL,
  title text,
  content_encrypted text NOT NULL,
  content_hash text NOT NULL,
  content_type text DEFAULT 'html'::text CHECK (content_type = ANY (ARRAY['html'::text, 'text'::text, 'markdown'::text, 'json'::text, 'xml'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  scraped_at timestamp with time zone DEFAULT now(),
  content_size_bytes integer DEFAULT 0,
  word_count integer DEFAULT 0,
  language text DEFAULT 'en'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT web_scraped_content_pkey PRIMARY KEY (id),
  CONSTRAINT web_scraped_content_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.external_connections(id)
);
CREATE TABLE public.workspace_data_sources (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  source_type text NOT NULL CHECK (source_type = ANY (ARRAY['file'::text, 'database'::text, 'api'::text, 'spreadsheet'::text, 'document'::text, 'website'::text, 'rss'::text, 'notion'::text, 'airtable'::text, 'slack'::text, 'github'::text, 'jira'::text, 'trello'::text, 'asana'::text, 'sharepoint'::text, 'onedrive'::text, 'dropbox'::text])),
  source_id uuid NOT NULL,
  source_name text NOT NULL,
  is_active boolean DEFAULT true,
  last_accessed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workspace_data_sources_pkey PRIMARY KEY (id),
  CONSTRAINT workspace_data_sources_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id)
);
CREATE TABLE public.workspace_invitations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  email text NOT NULL,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['admin'::text, 'member'::text, 'viewer'::text])),
  invited_by uuid NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'accepted'::text, 'declined'::text, 'expired'::text])),
  token text NOT NULL UNIQUE,
  expires_at timestamp with time zone NOT NULL DEFAULT (now() + '7 days'::interval),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT workspace_invitations_pkey PRIMARY KEY (id),
  CONSTRAINT workspace_invitations_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT workspace_invitations_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users(id)
);
CREATE TABLE public.workspace_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  workspace_id uuid NOT NULL,
  user_id uuid NOT NULL,
  role text NOT NULL DEFAULT 'member'::text CHECK (role = ANY (ARRAY['admin'::text, 'member'::text, 'viewer'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  status text NOT NULL DEFAULT 'active'::text,
  CONSTRAINT workspace_members_pkey PRIMARY KEY (id),
  CONSTRAINT workspace_members_workspace_id_fkey FOREIGN KEY (workspace_id) REFERENCES public.workspaces(id),
  CONSTRAINT workspace_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.workspaces (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  description text,
  organization_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  status text NOT NULL DEFAULT 'active'::text,
  CONSTRAINT workspaces_pkey PRIMARY KEY (id),
  CONSTRAINT workspaces_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.xp_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  agent_id text NOT NULL,
  xp_change integer NOT NULL,
  reason text NOT NULL,
  achievement_id text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xp_history_pkey PRIMARY KEY (id),
  CONSTRAINT xp_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT xp_history_achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(achievement_id)
);